
======================
==== default.register_chest(def)
======================

default.register_chest({
	name = "locked_chest",			--Required
	description = "Locked chest",
	locked = true,
	burnable = true,
	texture="default_wood.png",			--Required
	craft={{"default:chest","default:steel_ingot"}},
})


======================
==== default.register_fence(def)
======================

default.register_fence({
	name = "apple_wood",			--Required
	texture = "plants_apple_wood.png",		--Required
	craft={{"group:stick","group:stick","group:stick"}}
})


======================
==== default.register_chair(def)
======================

default.register_chair({
	name = "apple_wood",		--Required
	description = "Apple wood chair",
	burnable = true,
	texture = "plants_apple_wood.png",	--Required
	craft={{"group:stick","wood",""}}
})


======================
==== default.workbench.register_craft(def)
======================

default.workbench.register_craft({
	output="mod:name",
		recipe={
			{"default:steel_ingot","default:steel_ingot","default:steel_ingot"},
			{"","group:stick",""},
			{"","group:stick",""},
		}
	},
})

======================
==== default.date(param,compare)
======================

params:
get	get current time (return os.time())
s	secunds
m	minuts
h	hours
d	days

example:

local time = default.date("get")
meta:set_int("date",time)

... ... ...

if default.date("h",meta:get_int("date")) > 3 then

======================
==== default.register_eatable(itemtype,name,hp,gaps,def)
======================

itemtype		"node"/"tool"/"craftitem"
name		"mod:name"
hp		number			health to add at each use
gaps		number			parts to eat,
def		item def / table

======================
==== default.register_door(def)
======================

default.register_door({
	name="apple_wood_door",		--Required: name of item
	description = "Apple wood door",
	texture="plants_apple_wood.png",
	burnable = true,
	craft={
		{"plants:apple_wood","plants:apple_wood",""},
		{"plants:apple_wood","plants:apple_wood",""},
		{"plants:apple_wood","plants:apple_wood",""},
	}
})

======================
==== default.register_plant(def)
======================

this is just registering a node with default settings,but you can change all of them
default.register_plant({
	name="anthriscus_sylvestris",		--Required: name of item
	description			string/nil	
	tiles={"parsnip.png"},			--tiles
	decoration={noise_params={
		offset=-0.0015,
		scale=0.015,
		seed=3365,
	}},
	groups={spreading_plant=10},
	visual_scale=1.1,
})

======================
==== default.register_tree(def)
======================

default.register_tree({
	name="apple",		--Required: name of items
	fruit={			--Spawning fruits
		hp=1,
		gaps=4,
		description = "Apple",
		tiles={"plants_apple.png"},
		inventory_image="plants_apple.png",
	},
	tree={tiles={"tree_top.png","tree_top.png","tree.png"}},	-- tree
	sapling={tiles={"plants_apple_treesapling.png"}},	--sapling
	wood={tiles={"plants_apple_wood.png"}},		--wood
	leaves={tiles={"plants_apple_leaves.png"}},		--leaves
	schematic=modpath.."tree.mts",			--Required: genrating the tree
	sapling_place_schematic=function(pos)		--Required: growing tree from sapling
		minetest.place_schematic(pos, modpat ..tree.mts)
	end
})

======================
==== default.registry_mineral(def)
======================
auto generating mineral items: block, ore, lump, ingot, pick, shovel axe, vineyardknife, hoe and crafting

tool craft-recipes are registered as workbench crafting


Options:

all options have default values, so you don't have to fill a table if you just want to add 1 value inside it except tool_capabilities, example of this in default/items.lua.
the table of settings will be set as the item define


default.registry_mineral({
	name		"itemname",		--Required: name used for all items
	texture		"img.png",		--Required: used as default texture for all items


	not_lump				nil/true	--disable lump (drop)
	lump={
			description	nil/""
			inventory_image	nil/"img.png"
	}


	drop={					--can be set if not_lump = true
			name		nil/""
			inventory_image	nil/"img.png"/diamond/longcrystal/round(tinemeald/oval/crystal/quartz/emeald
			description	nil/""
	}


	not_ingot				nil/true	--disable ingot
	not_ingot_craft			nil/true	--disable automatic recipe
	ingot={
			description	nil/""
			inventory_image	nil/"img.png"
	},


	not_block				nil/true	--disable block
	not_block_craft			nil/true	--disable automatic recipe
	block={
			tiles		tiles/table
			description	nil/""
			sounds		nil/sounds
			groups		nil/table
	}


	not_ore				nil/true	--disable block
	ore={
			tiles		tiles/table
			description	nil/""
			sounds		nil/sounds
			groups		nil/table
	}


	ore_settings			nil/table		can be used even not_ore = true through name
			name		nil/string
			wherein		nil/"node"
			clust_scarcity	nil/number
			clust_num_ores	nil/number
			clust_size		nil/number
			y_min		nil/number
			y_max		nil/number
	}


	not_pick				nil/true	--disable pick
	pick={
			description	nil/""
			sounds		nil/sounds
			inventory_image	nil/"img.png"
			tool_capabilities	nil or	{
						full_punch_interval
						max_drop_level
						damage_groups
						groupcaps
						}
	}


	not_shovel			nil/true	--disable shovel
	shovel={
			description	nil/""
			sounds		nil/sounds
			inventory_image	nil/"img.png"
			tool_capabilities	nil or	{
						full_punch_interval
						max_drop_level
						damage_groups
						groupcaps
						}
	}


	not_axe				nil/true	--disable axe
	axe={
			description	nil/""
			sounds		nil/sounds
			inventory_image	nil/"img.png"
			tool_capabilities	nil or	{
						full_punch_interval
						max_drop_level
						damage_groups
						groupcaps
						}
	}


	not_vineyardknife			nil/true	--disable vineyardknife
	vineyardknife={
			description	nil/""
			sounds		nil/sounds
			inventory_image	nil/"img.png"
			tool_capabilities	nil or	{
						full_punch_interval
						max_drop_level
						damage_groups
						groupcaps
						}
	}


	not_hoe				nil/true	--disable hoe
	hoe={
			description	nil/""
			sounds		nil/sounds
			inventory_image	nil/"img.png"
			tool_capabilities	nil or	{
						full_punch_interval
						max_drop_level
						damage_groups
						groupcaps
						}
	}


	regular_additional_craft={			-- default crafting, can contain multiple recipes
		{output="default:coalblock",
			recipe={
				{"default:coal_lump","default:coal_lump","default:coal_lump"},
				{"default:coal_lump","default:coal_lump","default:coal_lump"},
				{"default:coal_lump","default:coal_lump","default:coal_lump"},
			}
		}
	}


	workbench_additional_craf={		-- workbench crafting, can contain multiple recipes
		{output="default:coalblock",
			recipe={
				{"default:coal_lump","default:coal_lump","default:coal_lump"},
				{"default:coal_lump","default:coal_lump","default:coal_lump"},
				{"default:coal_lump","default:coal_lump","default:coal_lump"},
			}
		}
	}


})